{"version":3,"sources":["services/Api.ts","hooks/useHistoryBill.ts","hooks/useApproveBill.ts","components/CreditorListItem/CreditorListItem.tsx","hooks/useFormBill.ts","components/BillText/BillText.tsx","components/LoadingSpinner/LoadingSpinner.tsx","containers/Creditor/Creditor.tsx","containers/Debtor/Debtor.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["baseUrl","Bills","getBills","a","axios","get","res","data","getHistory","approvePay","toApprove","post","addPay","toPay","useHistoryBill","useQuery","isLoading","isSuccess","useApproveBill","queryClient","useQueryClient","mutate","useMutation","onSuccess","variables","context","msj","refetchQueries","generateTextResponse","selectValue","toast","autoClose","console","log","transaction","useState","setSelectValue","handleChange","e","target","value","handleSubmit","id","status","ApprovePayToast","ToastContainer","CreditorListItem","isCompleted","title","body","_id","append","text","name","onChange","onClick","size","useBillForm","bill","setBill","inputValue","setInputValue","showInput","setShowInput","isReadOnly","setIsReadOnly","concept","setConcept","useEffect","handleCancel","readOnly","handleShowForm","action","handleInput","typeConcept","alert","BillFormToast","BillText","money","textValue","Intl","NumberFormat","format","className","LoadingSpinner","Creditor","dataBill","isSuccessBill","owner","map","item","Debtor","historyData","isLoadingHistory","isSuccessHistory","type","App","screen","setScreen","defaultChecked","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7d6fe1f6.chunk.js","sourcesContent":["import { AddPay, ApprovePay } from './../models/Bill';\nimport axios from 'axios'\n\n// const baseUrl = 'http://localhost:3001/';\nconst baseUrl = 'https://young-escarpment-43192.herokuapp.com/';\n\nexport class Bills {\n    static getBills = async () => {\n        const res = await axios.get(baseUrl+\"bills\")\n        return res.data\n    }\n\n    static getHistory = async () => {\n        const res = await axios.get(baseUrl+\"bill-history\")\n        return res.data\n    }\n\n    static approvePay = async (toApprove: ApprovePay) => {\n        return await axios.post(baseUrl+\"approve-pay\", toApprove)\n    }\n\n    static addPay = async (toPay: AddPay) => {\n        // const toPay = { value: payValue }\n        return await axios.post(baseUrl+\"add-pay\", toPay)\n    }\n}","import { useQuery } from 'react-query';\nimport { Bills } from '../services/Api';\nexport const useHistoryBill = () => {\n    const { data, isLoading, isSuccess } = useQuery(\"bill-history\", Bills.getHistory)\n    return {\n        data,\n        isLoading,\n        isSuccess\n    }\n}","import { ApprovePay } from './../models/Bill';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useState } from \"react\"\nimport { Bills } from '../services/Api';\nimport { ToastContainer, toast } from 'react-toastify';\n\nconst notify = (msj: string) => toast(msj, { autoClose: 5000 })\n\nexport const useApproveBill = () => {\n    const queryClient = useQueryClient()\n\n    const { mutate } = useMutation(Bills.approvePay, {\n        onSuccess: (data, variables, context) => {\n            // queryClient.setQueryData([\"bill-history\", { _id: variables.id }], data.data._doc)\n            queryClient.refetchQueries()\n            notify(`la transaccion fue ${generateTextResponse(selectValue)} con exito!`)\n            console.log(\"do something\")\n        }\n    })\n\n    const generateTextResponse = (transaction: string):string => {\n        if(transaction === \"Aprobar\") {\n            return \"aprobada\"\n        }else {\n            return \"rechazada\"\n        }\n    }\n\n    const [selectValue, setSelectValue] = useState(\"Aprobar\")\n\n    const handleChange = (e: any) => {\n        setSelectValue(e.target.value)\n    }\n\n    const handleSubmit = (id: string, value: number) => {\n        const toApprove: ApprovePay = {\n            id: id,\n            value: value,\n            status: selectValue\n        }\n        mutate(toApprove)\n    }\n\n    return {\n        handleChange,\n        handleSubmit,\n        selectValue,\n        ApprovePayToast: ToastContainer\n    }\n}","import { BiSave } from 'react-icons/bi'\nimport { useApproveBill } from '../../hooks/useApproveBill'\nimport { HistoryPay } from '../../models/Bill'\n\ntype CreditorListItemProps = {\n    data: HistoryPay\n}\n\nconst CreditorListItem = ({ data }: CreditorListItemProps) => {\n\n    const isCompleted = data.title !== \"pending\" ? true : false\n    const { body, title, _id, append } = data\n    const text = `${title} - ${body}`\n\n    const { handleChange, handleSubmit } = useApproveBill()\n\n    return (\n        <li>\n            <span>{text}</span>\n            { !isCompleted && (\n                <div>\n                    <select name=\"action-select\" onChange={handleChange}>\n                        <option value=\"Aprobar\">Aprobar</option>\n                        <option value=\"Rechazar\">Rechazar</option>\n                    </select>\n                    <button onClick={() => handleSubmit(_id, append.value)}><BiSave size={23} /> </button>\n                </div>\n            )}\n        </li>\n    )\n}\n\nexport default CreditorListItem\n","import { AddPay } from './../models/Bill';\nimport { useEffect, useState } from \"react\"\nimport { useMutation, useQuery, useQueryClient } from \"react-query\"\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Bills } from \"../services/Api\"\n\nexport const useBillForm = () => {\n    const queryClient = useQueryClient()\n    const { data, isSuccess, isLoading } = useQuery('bills', Bills.getBills)\n    const [bill, setBill] = useState(0)\n    const [inputValue, setInputValue] = useState<number | string>(\"\")\n    const [showInput, setShowInput] = useState(false)\n    const [isReadOnly, setIsReadOnly] = useState(false)\n\n    const notify = (msj: string) => toast(msj, { autoClose: 5000 })\n\n    const { mutate } = useMutation(Bills.addPay, {\n        onSuccess: (data, variables, context) => {\n            // console.log(data)\n            // console.log(variables)\n            // console.log(context)\n            queryClient.refetchQueries()\n            notify(`el abono por ${variables.value} ha sido enviado!`)\n        }\n    })\n\n    const [concept, setConcept] = useState(\"pay\")\n\n    useEffect(() => {\n        if(isSuccess){\n            setBill(data[0].value)\n        }\n    }, [data])\n\n    const handleShowForm = (action:string) => {\n        if(action === 'payAll') {\n            setIsReadOnly(true)\n            setInputValue(bill)\n            setConcept(action)\n        }else if(action === 'pay') {\n            setIsReadOnly(false)\n            setInputValue(\"\")\n            setConcept(action)\n        }else {\n            setIsReadOnly(false)\n            setInputValue(\"\")\n            setConcept(action)\n        }\n        setShowInput(!showInput)\n    }\n\n    const handleInput = (e: any) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleCancel = () => {\n        setInputValue(0)\n        setIsReadOnly(false)\n        setShowInput(false)\n    }\n\n    const handleSubmit = (typeConcept: string) => {\n        if(inputValue && inputValue <= 0) return alert('el valor no puede ser 0')\n        const toPay:AddPay = { id: data[0]._id, value: inputValue as number, concept: typeConcept }\n        mutate(toPay)\n        handleCancel()\n    }\n\n    const readOnly = isReadOnly ? { readOnly:true } : { readOnly:false }\n\n\n    return {\n        bill,\n        inputValue,\n        showInput,\n        readOnly,\n        handleShowForm,\n        handleInput,\n        handleSubmit,\n        handleCancel,\n        isSuccess,\n        isLoading,\n        data,\n        concept,\n        BillFormToast: ToastContainer\n    }\n}","import './BillText.styles.scss';\n\ntype BillTextProps = {\n    value: number,\n    money: string\n}\nconst BillText = ({value, money}: BillTextProps) => {\n\tconst textValue = new Intl.NumberFormat(\"es-CO\").format(value)\n\treturn (\n\t\t<div className=\"value-bill\">\n\t\t\t<label>Deuda a la fecha:</label>\n\t\t\t<p>\n\t\t\t\t{textValue}\n\t\t\t\t<span> {money}</span>\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n\nexport default BillText;\n","import { AiOutlineLoading3Quarters } from \"react-icons/ai\";\nimport \"./LoadingSpinner.styles.scss\"\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"load-spinner\">\n            <AiOutlineLoading3Quarters size={34} />\n        </div>\n    )\n}\n\nexport default LoadingSpinner\n","import { useHistoryBill } from '../../hooks/useHistoryBill'\nimport CreditorListItem from '../../components/CreditorListItem/CreditorListItem';\nimport { HistoryPay } from '../../models/Bill';\nimport { useBillForm } from '../../hooks/useFormBill';\nimport BillText from '../../components/BillText/BillText';\nimport './Creditor.styles.scss'\nimport { useApproveBill } from '../../hooks/useApproveBill';\nimport 'react-toastify/dist/ReactToastify.css';\nimport LoadingSpinner from '../../components/LoadingSpinner/LoadingSpinner';\n\nconst Creditor = () => {\n    const { data, isLoading, isSuccess } = useHistoryBill()\n    const { data: dataBill, isSuccess: isSuccessBill } = useBillForm()\n    const { ApprovePayToast } = useApproveBill()\n\n    return (\n        <div className=\"creditor-container\">\n            <h1>creditor screen</h1>\n            <h2>{ isSuccessBill && dataBill[0].owner }</h2>\n            { isSuccessBill && <BillText value={dataBill[0].value} money={dataBill[0].money} />}\n            <ul>\n                { isLoading &&  <LoadingSpinner />}\n                { isSuccess && (\n                    data.map((item: HistoryPay) => {\n                        const { _id } = item\n                        return (\n                            <CreditorListItem key={ _id } data={ item } />\n                        )\n                    })\n                )}\n            </ul>\n            <ApprovePayToast />\n        </div>\n    )\n}\n\nexport default Creditor\n","import { BiUserCircle } from \"react-icons/bi\";\nimport { useBillForm } from \"../../hooks/useFormBill\";\nimport { useHistoryBill } from \"../../hooks/useHistoryBill\";\nimport { HistoryPay } from \"../../models/Bill\";\nimport BillText from \"../../components/BillText/BillText\";\nimport \"./Debtor.styles.scss\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport LoadingSpinner from \"../../components/LoadingSpinner/LoadingSpinner\";\n\nconst Debtor = () => {\n\tconst {\n\t\thandleShowForm,\n\t\tshowInput,\n\t\tinputValue,\n\t\treadOnly,\n\t\thandleInput,\n\t\thandleCancel,\n\t\thandleSubmit,\n\t\tisSuccess,\n\t\tisLoading,\n\t\tdata,\n\t\tBillFormToast,\n\t\tconcept\n\t} = useBillForm();\n\n\tconst {\n\t\tdata: historyData,\n\t\tisLoading: isLoadingHistory,\n\t\tisSuccess: isSuccessHistory,\n\t} = useHistoryBill();\n\n\treturn (\n\t\t<div>\n\t\t\t<header>\n\t\t\t\t<h1>Mis deudas app</h1>\n\t\t\t\t<div className=\"profile\">\n\t\t\t\t\t<BiUserCircle size={48} />\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<main>\n\t\t\t\t{isLoading && <LoadingSpinner />}\n\t\t\t\t{isSuccess && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<BillText value={data[0].value} money={data[0].money} />\n\t\t\t\t\t\t<div className=\"actions\">\n\t\t\t\t\t\t\t<button onClick={() => handleShowForm(\"pay\")}>Pagar Abono</button>\n\t\t\t\t\t\t\t<button onClick={() => handleShowForm(\"credit\")}>Realizar Credito</button>\n\t\t\t\t\t\t\t<button onClick={() => handleShowForm(\"payAll\")}>Pagar Todo</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{showInput && (\n\t\t\t\t\t\t\t<div className=\"input-form\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tonChange={(e) => handleInput(e)}\n\t\t\t\t\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t{...readOnly}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<button onClick={handleCancel}>Cancelar</button>\n\t\t\t\t\t\t\t\t<button onClick={() => handleSubmit(concept)}>{ concept }</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div className=\"history-graph\">\n\t\t\t\t\t<span>...cargando grafico</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"history-values\">\n                    {\n                        isLoadingHistory && <LoadingSpinner />\n                    }\n                    {\n                        isSuccessHistory && (\n                            <ul>\n                                {\n                                    historyData.map((item:HistoryPay) => {\n                                        const { _id, body, title } = item\n                                        const text = `${title} ${body}`\n                                        return(\n                                            <li key={_id}>{ text }</li>\n                                        )\n                                    })\n                                }\n                            </ul>\n                        )\n                    }\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t\t<BillFormToast />\n\t\t</div>\n\t);\n};\n\nexport default Debtor;\n","// import React from 'react';\n// import logo from './logo.svg';\nimport './App.scss';\nimport { useState } from 'react';\n//@ts-ignore TODO: assign types\nimport Toggle from 'react-toggle'\nimport Creditor from './containers/Creditor/Creditor';\nimport Debtor from './containers/Debtor/Debtor';\nimport \"react-toggle/style.css\"\n\nfunction App() {\n  const [screen, setScreen] = useState(true)\n\n  const handleChange = () => {\n    setScreen(!screen)\n  }\n\n  return (\n    <div className=\"App\">\n      <label>\n        <Toggle\n          defaultChecked={screen}\n          onChange={handleChange} />\n      </label>\n      { screen ? <Creditor /> : <Debtor /> }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}